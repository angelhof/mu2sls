#!/usr/bin/env python3
import argparse
import logging
import os

from compiler import compiler

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("input", help="the input file to be compiled (must contain a service)")
    parser.add_argument("output", help="the output file that will contain a serverless handler")
    parser.add_argument("-l", "--log_level",
                        help="the logging level",
                        choices=['debug', 'info', 'warn', 'error'],
                        default='info')
    parser.add_argument("-s", "--sls_backend",
                        help="the serverless backend",
                        choices=['openfaas', 'local', 'knative'],
                        default='local')
    args = parser.parse_args()

    ## Print all the arguments before they are modified below
    logging.debug("Arguments:")
    for arg_name, arg_val in vars(args).items():
        logging.debug(arg_name + str(arg_val))
    logging.debug("-" * 40)
    return args

def set_logging_level(args):
    logger = logging.getLogger()
    if args.log_level == 'debug':
        logger.setLevel(logging.DEBUG)
    elif args.log_level == 'info':
        logger.setLevel(logging.INFO)
    elif args.log_level == 'warn':
        logger.setLevel(logging.WARN)
    elif args.log_level == 'error':
        logger.setLevel(logging.ERROR)

def main():
    args = parse_args()
    source_file = args.input
    out_file = args.output

    set_logging_level(args)

    compiler.compile_single_method_service_module(source_file, out_file, args.sls_backend)

if __name__ == "__main__":
    main()